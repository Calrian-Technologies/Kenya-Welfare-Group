name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9]

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      shell: bash

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h 127.0.0.1 --silent; do
          sleep 1
        done
      shell: bash

    - name: Set up Database
      run: |
        python manage.py makemigrations
        python manage.py migrate
      shell: bash

    - name: Run Linting
      run: |
        pip install pylint
        pylint **/*.py
      shell: bash

    - name: Run Tests
      run: |
        pip install coverage pytest-cov
        coverage run -m pytest
      shell: bash

    - name: Upload Test Results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: coverage.xml

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov

    - name: Security Checks
      run: |
        pip install bandit safety
        bandit -r .
        safety check
      shell: bash

    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production..."
        # Add deployment commands here
      shell: bash

    - name: Clean Up
      run: |
        rm -rf htmlcov
        rm -rf .coverage
        rm -rf pip_cache
      shell: bash


